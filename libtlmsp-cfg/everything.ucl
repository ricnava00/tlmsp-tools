# At least one context must be defined.
# All contexts must be defined before 'activity' and 'middlebox' blocks.
context {
    # id = <n>
    # [optional, default: auto-assigned] Must be unique across all
    # contexts.
    id = 1

    # tag = <string>
    # [optional, default: empty] Multiple contexts can be given the same
    # tag.
    tag = "context 1"

    # comment = <string>
    # [optional, default: empty] For application use.
    comment = "This is context 1"

    # purpose = <string>
    # [optional, default: empty] Sent on the wire in ContextDescription.
    purpose = "Application-specific"

    # audit = yes | no | true | false
    # [optional, default: no]
    audit = no
}

# Minimal context
context {
    id = 2
}

# An activity provides a match-action definition of work to do for an
# example program.  Defining activities is optional.
activity {
    # tag = <string>
    # [optional, default: empty] Must be unique across all
    # activities.
    tag = activity-1

    # match { }
    # [required] A match can either be time, container, or data
    # pattern triggered.
    match {
        # at = <ms>
        # Time in milliseconds from connection established to trigger
        # the action at.
        at = 0

        # every = <ms>
        # Time in milliseconds from connection established (or if 'at'
        # is also specified, from the time given with 'at') to trigger
        # the action at.  The action then repeats at this interval.
        every = 500

        # which = <id|tag> | [ <id|tag>, ... ]
        # [required for container or data matches, invalid for time
        # matches] Specifies the contexts to search for a match in.

        # container = <n> | <probability> | * | all
        # Of the containers in 'which', match the nth (n >= 1), match
        # with probability (0.0 < p < 1.0), or match all ('*' | 'all').

        # data = <string>
        # Match the given data string.

        # file = <filename>
        # Match the contents of the given file.

        # regex = <regex>
        # Match the regular expression.  Capture groups can be
        # referenced in 'template' in the 'action' block.
    }

    # action { }
    # [required] An action can affect the matched data (or containers)
    # as well as produce new data in either direction.
    action {
        # send-before | send-replace | send-after | reply {
        #
        #    'send-before'  - send new data prior to forwarding the
        #                     (transformed) matched data
        #    'send-replace' - transform the matched data before
        #                     forwarding it
        #    'send-after'   - send new data after forwarding the
        #                     (transformed) matched data
        #    'reply'        - send new data in the other direction. This
        #                     only has meaning for middleboxes. For the
        #                     client and server, there is only 'send'.
        #
        #   context = <id> | <tag>
        #   Which context to send the data in
        #
        #   data = <string>
        #   Send the data in the given string
        #
        #   file = <filename>
        #   Send the data in the given file
        #
        #   template = <string>
        #   Send the data in the given string, which can contain
        #   substitution variables $0..$n.  $0 refers to all of the
        #   matched data.  In the case of a regex match, $1..$n refer
        #   to the corresponding capture group in the match regex.
        #
        #   handler = <cmd_string>
        #   Invoke 'sh -c <cmd_string>', passing the matched data to
        #   the handler's stdin and receiving the replacement data
        #   from the handler's stdout.
        # }
        # 
        send-after {
            context = 2
            data = "ping"
        }

        # fault = drop | reorder | corrupt-header | corrupt-data | corrupt-mac        
        # Apply the given fault to all of the containers produced and
        # forwarded by this action.
    }
}

activity {
    tag = activity-2
    match {
        which = *
        data = "ping"
    }
    action {
        reply {
            context = 2
            data = "pong"
        }
    }
}

# client { }
# [optional] A 'client' block is only needed if the client example
# program is to be configured.
client {
    # version = v<version_num>
    # version {
    #     Override one or both ends of the default range  
    #     min = v<version_num>
    #     max = v<version_num>
    # }
    # [optional, default: library-specific]
    version = v1.0

    # address = <string>
    # [required] This value is included in the ClientHello for the
    # server's benefit. Valid formats are:
    #   url  (The only format the allows speciying a port
    #         number. Currently the protocol specifier is
    #         ignored.)
    #   fqdn
    #   ipv4
    #   ipv6
    #   mac  (Not currently resolvable.)
    address = tlmsp://client_hostname

    # function = <tag> | [ <tag>, ... ]
    # [optional, default: no activity] One or more tags for activities
    # that this entity will execute.
    function = activity-1 
}

# server { }
# [optional] A 'server' block is only needed if the client or server
# example program is to be configured.
server {
    # version
    # [optional, see 'client' block for details]

    # address
    # [required, see 'client' block for details] This address is used
    # by the client example program, which includes it in the
    # ClientHello.
    address = tlmsp://server_hostname:port

    # cert-file = <filename>
    # [optional, default: 'cert.pem'] Server certificate file to use.
    cert-file = cert.pem

    # cert-key-file = <filename>
    # [optional, default: 'key.pem'] Server certificate private key
    # file to use.
    cert-key-file = key.pem

    # function
    # [optional, see 'client' block for details]
    function = activity-2
}

# middlebox { }
# [optional] One or more 'middlebox' blocks may be defined if the
# client or middlebox example programs are to be configured.  When
# multiple 'middlebox' blocks are defined, they are to be defined in
# network topological order, from the client to the server.
middlebox {
    # tag = <string>
    # [required] Must be unique across all defined middleboxes.
    tag = "mbox1"

    # address
    # [required, see 'client' block for details] This address is used
    # by the client and middlebox example programs.
    address = tlmsp://middlebox_hostname:port

    # cert-file = <filename>
    # [optional, default: '<tag>-cert.pem'] Middlebox certificate file
    # to use.
    cert-file = mbox1-cert.pem

    # [optional, default: '<tag>-key.pem'] Middlebox certificate
    # private key file to use.
    cert-key-file = mbox1-key.pem

    # transparent = yes | no | true | false
    # [optional, default: no] When yes | true, the middlebox will
    # operate in transparent mode.
    transparent = no

    # discovered = yes | no | true | false
    # [optional, default: no] When no | false, the client will insert
    # this middlebox into the ClientHello.  When yes | true, if the
    # middlebox is transparent, it will insert itself into the
    # ClientHello, otherwise if the middlebox is not transparent, the
    # server will insert it into the ServerHello.
    discovered = no

    # context { }
    # [required] At least one context block is required
    context {
        # which = <id|tag> | [ <id|tag>, ... ]
        # [required] This indicates one or more contexts to which this
        # middlebox will have access.  The value '*' indicates all
        # contexts. Duplicates are ignored.
        which = [ "context 1", 2 ]

        # access = none | r | rw
        # [optional, default: r]
        access = rw
    }

    # function-to-client
    # [optional, see 'function' in 'client' block for details]
    # Activities to perform in the to-client direction.  By default,
    # unmatched containers are forwarded.

    # function-to-server
    # [optional, see 'function' in 'client' block for details]
    # Activities to perform in the to-server direction. By default,
    # unmatched containers are forwarded.
}

