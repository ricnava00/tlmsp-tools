#
# This file describes all of the available configuration keywords.
#
# The essentials are:
#   - Define one or more contexts
#   - Define zero or more match-action activities
#   - Define the client and server
#       - Assign each zero or more activities
#   - Define zero or more middleboxes in network topological order
#       - Grant each middlebox access to zero or more contexts
#       - Assign each middlebox zero or more activites
#

# At least one context must be defined.
# All contexts must be defined before 'activity' and 'middlebox' blocks.
context {
    # id = <n>
    # [optional, default: auto-assigned] Must be unique across all
    # contexts.
    id = 1

    # tag = <string>
    # [optional, default: empty] Multiple contexts can be given the same
    # tag.
    tag = "context 1"

    # comment = <string>
    # [optional, default: empty] For application use.
    comment = "This is context 1"

    # purpose = <string>
    # [optional, default: empty] Sent on the wire in ContextDescription.
    purpose = "Application-specific"

    # audit = yes | no | true | false
    # [optional, default: no] yes | true corresponds to
    # audit=confirmed from the specification, while no | false corresponds
    # to audit=unconfirmed.
    audit = no
}

# Minimal context
context {
    id = 2
}

# An activity provides a match-action definition of work to do for an
# example program.  Defining activities is optional.
activity {
    # tag = <string>
    # [optional, default: empty] Must be unique across all
    # activities.
    tag = activity-1

    # match { }
    # [required] A match can either be time, container, or data
    # pattern triggered.  Container and pattern matches always delete
    # the matched containers/data from the data stream.
    match {
        # at = <ms>
        # Time in milliseconds from connection established to trigger
        # the action at.
        at = 0

        # every = <ms>
        # Time in milliseconds from connection established (or if 'at'
        # is also specified, from the time given with 'at') to trigger
        # the action at.  The action then repeats at this interval.
        every = 500

        # which = <id|tag> | [ <id|tag>, ... ]
        # [required for container or data matches, invalid for time
        # matches] Specifies the contexts to search for a match in. The
        # value '*' means search in all acessible contexts.

        # container = <n> | <probability> | * | all
        # Of the containers in 'which', match the nth (n >= 1), match
        # with probability (0.0 < p < 1.0), or match all ('*' | 'all').

        # data = <string>
        # Match the given data string.

        # file = <filename>
        # Match the contents of the given file.

        # regex = <regex>
        # Match the regular expression.  Capture groups can be
        # referenced in 'template' in the 'action' block.
    }

    # action { }
    # [optional] An action can produce new data (in either direction in
    # the case of middleboxes).  Zero or more action blocks can be defined.
    # If multiple action blocks are defined, they are executed in the defined
    # order.  If no action blocks are defined, or if only an empty action
    # block is defined, the net result is that the matched data is deleted
    # from the data stream.  On an endpoint, such a configuration can be
    # useful to cause the matched data to be logged.
    action {
        #   'send'  - On an endpoint, send the given data.  On a
        #             middlebox, send the given data in the same
        #             direction that the match occurred.
        #   'reply' - On an endpoint, this is the same as send. On a
        #             middlebox, send the given data in the opposite
        #             direction that the match occurred.
        #
        # send | reply {
        #   context = <id> | <tag>
        #   Which context to send the data in
        #
        #   data = <string>
        #   Send the data in the given string
        #
        #   file = <filename>
        #   Send the data in the given file
        #
        #   template = <string>
        #   Send the data in the given string, which can contain
        #   substitution variables ${0}..${n}.  ${0} refers to all of
        #   the matched data.  In the case of a regex match,
        #   ${1}..${n} refer to the corresponding capture group in the
        #   match regex.  A reference to an undefined substitution
        #   variable resolves to an empty set of bytes.
        #
        #   handler = "cmd arg1 arg2..."
        #   Run the given command string under /bin/sh.  The contents
        #   of the match, if any, will be supplied to the handler on
        #   its stdin, and everything the handler writes to its stdout
        #   will be sent in the given context.
        # }
        # 
        send {
            context = 2
            data = "ping"
        }

        #   'alert' - Send the given alert.  On a middlebox, the alert
        #             is sent in direction indicated by the function
        #             the activity is included in.
        #
        # alert {
        #   context = <id> | <tag>
        #   Which context to send the data in - either context id 0 or
        #   the id or tag of a defined context.
        #
        #   level = fatal | warning
        #   The level of the alert, per RFC 5246
        #
        #   description = <int> | <name>
        #   The description value given either as a number in the range
        #   [0, 255] or the name as defined in RFC 5246 or ETSI TS 103-523-2.
        # }
        #
    }

    # present  = yes | no | true | false
    # [optional] Present the match and action details in the log using the
    # presentation logging mechanism.
}

activity {
    tag = activity-2
    match {
        which = *
        data = "ping"
    }
    action {
        reply {
            context = 2
            data = "pong"
        }
    }
}

# client { }
# [optional] A 'client' block is only needed if the client example
# program is to be configured.
client {
    # version = v<version_num>
    # version {
    #     Override one or both ends of the default range  
    #     min = v<version_num>
    #     max = v<version_num>
    # }
    # [optional, default: library-specific]
    version = v1.0

    # address = <string>
    # [required] This value is included in the ClientHello for the
    # server's benefit. Valid formats are:
    #   url  (The only format the allows speciying a port
    #         number. Currently the protocol specifier is
    #         ignored.)
    #   fqdn
    #   ipv4
    #   ipv6
    #   mac  (Not currently resolvable.)
    address = tlmsp://client_hostname

    # function = <tag> | [ <tag>, ... ]
    # [optional, default: no activity] One or more tags for activities
    # that this entity will execute.
    function = activity-1 
}

# server { }
# [optional] A 'server' block is only needed if the client or server
# example program is to be configured.
server {
    # version
    # [optional, see 'client' block for details]

    # address
    # [required, see 'client' block for details] This address is used
    # by the client example programs, which include it in the
    # ClientHello.
    address = tlmsp://server_hostname:port

    # cert-file = <filename>
    # [optional, default: 'server-cert.pem'] Server certificate file to use.
    cert-file = server-cert.pem

    # cert-key-file = <filename>
    # [optional, default: 'server-key.pem'] Server certificate private key
    # file to use.
    cert-key-file = server-key.pem

    # function
    # [optional, see 'client' block for details]
    function = activity-2
}

# middlebox { }
# [optional] Zero or more 'middlebox' blocks may be defined.  When
# multiple 'middlebox' blocks are defined, they are to be defined in
# network topological order, from the client to the server.
middlebox {
    # tag = <string>
    # [required] Must be unique across all defined middleboxes.
    tag = "mbox1"

    # address
    # [required, see 'client' block for details] This address is used
    # by the client, middlebox, and server example programs.
    address = tlmsp://middlebox_hostname:port

    # cert-file = <filename>
    # [optional, default: '<tag>-cert.pem'] Middlebox certificate file
    # to use.
    cert-file = mbox1-cert.pem

    # [optional, default: '<tag>-key.pem'] Middlebox certificate
    # private key file to use.
    cert-key-file = mbox1-key.pem

    # transparent = yes | no | true | false
    # [optional, default: no] When yes | true, the middlebox will
    # operate in transparent mode.
    transparent = no

    # discovered = yes | no | true | false
    # [optional, default: no] When no | false, and transparent is also
    # no | false, the client will insert this middlebox into the
    # ClientHello.  When yes | true, and transparent is also yes |
    # true, the middlebox will insert itself into the ClientHello,
    # otherwise if transparent is no | false, the server will insert
    # it into the ServerHello.
    discovered = no

    # forbidden = yes | no | true | false
    # [optional, default: no] When yes | true, the server will reject
    # the middlebox by marking it forbidden in the returned middlebox
    # list.
    forbidden = no

    # context { }
    # [optional] This block indicates access the middlebox has to one
    # or more contexts.  If no context block is defined, then the
    # middlebox has no access to any context.
    context {
        # which = <id|tag> | [ <id|tag>, ... ]
        # [required] This indicates one or more contexts to which this
        # middlebox will have access.  The value '*' indicates all
        # contexts. Duplicates are ignored.
        which = [ "context 1", 2 ]

        # access = none | r | rw
        # [optional, default: r]
        access = rw
    }

    # function-to-client
    # [optional, see 'function' in 'client' block for details]
    # Activities to perform in the to-client direction.  By default,
    # unmatched containers/data are forwarded.

    # function-to-server
    # [optional, see 'function' in 'client' block for details]
    # Activities to perform in the to-server direction. By default,
    # unmatched containers/data are forwarded.
}

