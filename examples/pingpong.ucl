#
# Simple ping pong arrangement bewteen a client and server with no
# middleboxes
#

# One context
context {
    id = 1
    tag = context-1
}

# Behavior definition that the client will use to send data
activity {
    tag = send-ping

    match {
	at = 2000     # Start the action two seconds after connect
        every = 3000  # Then repeat the action every 3 seconds
    }

    action {
        send {
            context = context-1    # Send in context-1
            data = "client-ping"   # Send this data
        }
    }
}

# Behavior definition that the client will use to report the response
activity {
    tag = report-pong

    match {
        which = *   # Which contexts to look for a match in.
                    # Endpoints have access to all contexts, so no
                    # need to be specific.
        data = "server-pong"
    }

    action {
        # An empty action block is used to only report the match
    }
}

# Behavior definition that the server will use
activity {
    tag = reply-pong

    match {
        which = *   # Which contexts to look for a match in.
                    # Endpoints have access to all contexts, so no
                    # need to be specific.
        data = "ping"  # Look for this data
    }

    action {
        send {
            context = context-1
            data = "server-pong"
        }
    }
}

# Give the client an address and the send-ping behavior
client {
    address = tlmsp://localhost
    function = [ send-ping, report-pong ]
}

# Give the server an address and the reply-pong behavior
server {
    address = tlmsp://localhost:10255
    function = reply-pong
}
